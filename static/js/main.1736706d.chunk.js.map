{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/phonebook/contacts-actions.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","App.js","redux/phonebook/contacts-reduser.js","redux/store.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","value","payload","id","shortid","generate","deleteContact","filterContact","getVisibleContacts","allContacts","normalizedFilter","toLowerCase","filter","name","includes","connect","contacts","items","dispatch","actions","className","css","contactList","map","contact","contactListItem","number","type","onClick","ContactForm","state","nameInputId","numberInputId","handleChange","event","setState","target","reset","handleSubmit","preventDefault","props","onAdd","onSubmit","this","label","pattern","title","required","onChange","placeholder","input_name","add_btn","Component","valueState","filterByName","App","createReducer","combineReducers","middleware","getDefaultMiddleware","logger","store","configureStore","reducer","contactsReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1736706d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"ContactList_contactList__2ieJd\",\"contactListItem\":\"ContactList_contactListItem__1jDmW\"};","// import types from './contacts-types';\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts/add', value => {\r\n  return {\r\n    payload: { id: shortid.generate(), ...value },\r\n  };\r\n});\r\n\r\n// оставил для понимания происходящего\r\n\r\n// const addContact = value => ({\r\n//   type: types.add,\r\n//   payload: { id: shortid.generate(), ...value },\r\n// });\r\n\r\nconst deleteContact = createAction('contacts/delete');\r\n\r\n// const deleteContact = contactId => ({\r\n//   type: types.delete,\r\n//   payload: contactId,\r\n// });\r\n\r\nconst filterContact = createAction('contacts/changeFilter');\r\n\r\n// const filterContact = value => ({\r\n//   type: types.filter,\r\n//   payload: value,\r\n// });\r\n\r\nexport default { addContact, deleteContact, filterContact };\r\n\r\n// contacts: prevState.contacts.filter(contact => contactId !== contact.id),\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/phonebook/contacts-actions';\r\nimport css from './ContactList.module.css'\r\n\r\nconst ContactList = ({contacts, deleteContact}) => (\r\n  <ul className={css.contactList}>\r\n          {contacts.map(contact => \r\n            <li className={css.contactListItem} >\r\n              <p>{contact.name}</p>\r\n              <p>{contact.number}</p>\r\n              <button type=\"button\" onClick={() => deleteContact(contact.id)}>Delete contact</button>\r\n            </li>)\r\n          }\r\n          \r\n        \r\n</ul>\r\n)\r\n\r\nconst getVisibleContacts = (allContacts, filterContact) => {\r\n  const normalizedFilter = filterContact.toLowerCase();\r\n\r\n  return allContacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ contacts: { items, filterContact } }) => {\r\n  return {\r\n    contacts: getVisibleContacts(items, filterContact),\r\n  };\r\n};\r\n\r\n// const mapStateToProps = (state) => ({ contacts: state.contacts.items })\r\nconst mapDispatchToProps = dispatch => ({ deleteContact: id => dispatch(actions.deleteContact(id)),});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from 'react';\r\nimport actions from '../../redux/phonebook/contacts-actions';\r\nimport { connect } from 'react-redux';\r\nimport shortid from 'shortid';\r\nimport css from './ContactForm.module.css'\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: ''\r\n  }\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = event => {\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  // handleChange = event => {\r\n  //   const {name, value} = event.currentTarget\r\n\r\n  //   this.setState({\r\n  //     [name]: value,\r\n  //   });\r\n  // };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    this.props.onAdd(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit} className={css.ContactForm}>\r\n      <label className={css.label} >\r\n        Name:\r\n        <input\r\n            id={this.nameInputId}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n            // className={css.input_name}\r\n            placeholder=\"Input name\"\r\n        />\r\n      </label>\r\n      <label label className={css.label} >\r\n        Phone number:\r\n           <input\r\n          id={this.numberInputId}\r\n          type=\"number\"\r\n          name=\"number\"\r\n          value={this.state.number}\r\n          pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n          title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n          required\r\n          onChange={this.handleChange}\r\n          className={css.input_name}\r\n          placeholder=\"Input number\"\r\n        />\r\n            \r\n      </label>\r\n\r\n        <button type='submit' className={css.add_btn}>Add contact</button>\r\n        \r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({onAdd: value => dispatch(actions.addContact(value))})\r\nexport default connect(null, mapDispatchToProps)(ContactForm);\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\nimport actions from '../../redux/phonebook/contacts-actions';\r\nimport './Filter.css'\r\n\r\nconst Filter = ({valueState, filterByName}) => {\r\n  return (\r\n    <label className=\"label\" >\r\n\t\t\t<input type=\"text\"\r\n\t\t\t\tvalue={valueState}\r\n\t\t\t\tonChange={filterByName} />\r\n      \r\n    </label>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ valueState: state.contacts.filterContact });\r\n\r\nconst mapDispatchToProps = dispatch => ({ filterByName: event => dispatch(actions.filterContact(event.target.value))});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import { Component } from 'react';\nimport ContactList from './components/ContactList/ContactList.jsx';\nimport ContactForm from './components/ContactForm/ContactForm.jsx';\nimport Filter from './components/Filter/Filter.jsx';\n// import shortid from 'shortid';\n\nclass App extends Component {\n  // state = {\n  //   contacts: [\n  //     { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  //     { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  //     { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  //     { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n  //   ],\n  //   filter: '',\n  //   name: '',\n  //   number: '',\n  // };\n\n  // deleteContact = contactId => {\n  //   this.setState(prevState => ({\n  //     contacts: prevState.contacts.filter(contact => contactId !== contact.id),\n  //   }));\n  // };\n\n  // addContact = ({ name, number }) => {\n  //   if (this.state.contacts.some(contact => contact.name === name)) {\n  //     alert(`${name} is already in contacts.`);\n  //     return;\n  //   }\n  //   const contact = { id: shortid.generate(), name, number };\n  //   this.setState(prevState => ({\n  //     contacts: [contact, ...prevState.contacts],\n  //   }));\n  // };\n\n  // filter = event => {\n  //   this.setState({\n  //     filter: event.currentTarget.value,\n  //   });\n  // };\n\n  // componentDidMount() {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   console.log('App componentDidUpdate');\n\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     console.log('Updated field contacts');\n\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  render() {\n    // const normalizedThisFilterState = this.state.filter.toLowerCase();\n    // const visibleContacts = this.state.contacts.filter(contact =>\n    //   contact.name.toLowerCase().includes(normalizedThisFilterState),\n    // );\n    return (\n      <>\n        {/* <ContactForm onAdd={this.addContact} /> */}\n        <ContactForm />\n\n        <ContactList\n        // contacts={visibleContacts}\n        // deleteContact={this.deleteContact}\n        />\n\n        {/* <Filter valueState={this.state.filter} filterByName={this.filter} /> */}\n        <Filter />\n      </>\n    );\n  }\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\nimport actions from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actions.addContact]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.add:\r\n//       return [...state, payload];\r\n\r\n//     case types.delete:\r\n//       return state.filter(contact => contact.id !== payload);\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nconst filterContact = createReducer('', {\r\n  [actions.filterContact]: (state, { payload }) => payload,\r\n});\r\n\r\n// const filterContact = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case 'contacts/changeFilter':\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({ items, filterContact });\r\n\r\n// prevState => ({ contacts: [contact, ...prevState.contacts] });\r\n","// import { combineReducers } from 'redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactsReducer from './phonebook/contacts-reduser';\r\nimport logger from 'redux-logger';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\n// const rootReducers = combineReducers({ contacts: contactsReducer });\r\n// const store = createStore(rootReducers, composeWithDevTools());\r\nconst middleware = [...getDefaultMiddleware(), logger];\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: contactsReducer },\r\n  middleware,\r\n});\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__1nNc3\",\"label\":\"ContactForm_label__OV0zD\",\"input_name\":\"ContactForm_input_name__TrS_H\",\"add_btn\":\"ContactForm_add_btn__2HVq9\"};"],"sourceRoot":""}